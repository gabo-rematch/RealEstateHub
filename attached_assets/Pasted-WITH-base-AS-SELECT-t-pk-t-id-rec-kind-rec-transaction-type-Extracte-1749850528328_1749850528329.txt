WITH base AS (
  SELECT
    t.pk,
    t.id,
    rec.kind,
    rec.transaction_type,

    -- Extracted arrays and fields
    CASE
      WHEN t.data->'bedrooms' IS NULL THEN '{}'::numeric[]
      WHEN jsonb_typeof(t.data->'bedrooms') = 'array' THEN (
        SELECT array_agg(x::numeric)
        FROM jsonb_array_elements_text(t.data->'bedrooms') AS x
      )
      ELSE ARRAY[(t.data->>'bedrooms')::numeric]
    END AS bedrooms,

    CASE
      WHEN t.data->'property_type' IS NULL THEN '{}'::text[]
      WHEN jsonb_typeof(t.data->'property_type') = 'array' THEN (
        SELECT array_agg(x)
        FROM jsonb_array_elements_text(t.data->'property_type') AS x
      )
      ELSE ARRAY[t.data->>'property_type']
    END AS property_type,

    CASE
      WHEN t.data->'communities' IS NOT NULL THEN
        CASE
          WHEN jsonb_typeof(t.data->'communities') = 'array' THEN (
            SELECT array_agg(x)
            FROM jsonb_array_elements_text(t.data->'communities') AS x
          )
          ELSE ARRAY[t.data->>'communities']
        END
      WHEN t.data->'community' IS NOT NULL THEN
        CASE
          WHEN jsonb_typeof(t.data->'community') = 'array' THEN (
            SELECT array_agg(x)
            FROM jsonb_array_elements_text(t.data->'community') AS x
          )
          ELSE ARRAY[t.data->>'community']
        END
      ELSE
        '{}'::text[]
    END AS communities,

    rec.price_aed,
    rec.budget_max_aed,
    rec.budget_min_aed,
    rec.area_sqft,
    rec.message_body_raw,
    rec.furnishing,
    rec.is_urgent,
    rec.is_agent_covered,

    CASE
      WHEN t.data->'bathrooms' IS NULL THEN '{}'::numeric[]
      WHEN jsonb_typeof(t.data->'bathrooms') = 'array' THEN (
        SELECT array_agg(x::numeric)
        FROM jsonb_array_elements_text(t.data->'bathrooms') AS x
      )
      ELSE ARRAY[(t.data->>'bathrooms')::numeric]
    END AS bathrooms,

    -- CASE
    --   WHEN t.data->>'move_date' IS NULL
    --     OR t.data->>'move_date' = 'null'
    --     OR t.data->>'move_date' = ''
    --     OR (t.data->>'move_date')::date > CURRENT_DATE
    --   THEN NULL
    --   ELSE (t.data->>'move_date')::date
    -- END AS move_date,

    rec.location_raw,
    rec.other_details,
    rec.has_maid_bedroom,
    rec.is_direct,
    rec.mortgage_or_cash,
    rec.is_distressed_deal,
    rec.is_off_plan,
    rec.is_mortgage_approved,
    rec.is_community_agnostic,

    CASE
      WHEN t.data->'developers' IS NULL THEN '{}'::text[]
      WHEN jsonb_typeof(t.data->'developers') = 'array' THEN (
        SELECT array_agg(x)
        FROM jsonb_array_elements_text(t.data->'developers') AS x
      )
      ELSE ARRAY[t.data->>'developers']
    END AS developers,

    -- ‹‹‹ Added agent details exactly as in Query #1 ›››
    iu.agent_details->>'whatsapp_participant' AS whatsapp_participant,
    iu.agent_details->>'agent_phone'           AS agent_phone,
    iu.agent_details->>'whatsapp_remote_jid'   AS groupJID,
    iu.agent_details->>'evolution_instance_id' AS evolution_instance_id,

    t.updated_at

  FROM inventory_unit_preference AS t
  LEFT JOIN public.inventory_unit AS iu
    ON iu.pk = t.inventory_unit_pk
  CROSS JOIN LATERAL jsonb_to_record(t.data) AS rec(
    kind                  TEXT,
    area_sqft             NUMERIC,
    is_direct             BOOLEAN,
    is_urgent             BOOLEAN,
    furnishing            TEXT,
    location_raw          TEXT,
    other_details         TEXT,
    price_aed             NUMERIC,
    budget_max_aed        NUMERIC,
    budget_min_aed        NUMERIC,
    has_maid_bedroom      BOOLEAN,
    is_agent_covered      BOOLEAN,
    message_body_raw      TEXT,
    mortgage_or_cash      TEXT,
    transaction_type      TEXT,
    is_distressed_deal    BOOLEAN,
    is_off_plan           BOOLEAN,
    is_mortgage_approved  BOOLEAN,
    is_community_agnostic BOOLEAN
  )
)
SELECT *
FROM base
WHERE
  -- A) bedrooms multiselect
  (
    {{ bedroomsSelect.value.length === 0 }}
    OR base.bedrooms && {{ bedroomsSelect.value }}
  )
  AND

  -- B) communities multiselect
  (
    {{ communitiesSelect.value.length === 0 }}
    OR base.communities && {{ communitiesSelect.value }}
  )
  AND

  -- C) transaction_type singleSelect
  (
    {{ transactionTypeSelect.value == null }}
    OR base.transaction_type = {{ transactionTypeSelect.value }}
  )
  AND

  -- D) kind singleSelect
  (
    {{ kindSelect.value == null }}
    OR base.kind = {{ kindSelect.value }}
  )
  AND

  -- E) unitType (property_type) multiselect
  (
    {{ propertyTypeSelect.value.length === 0 }}
    OR base.property_type && {{ propertyTypeSelect.value }}
  )
  AND

  -- F) budgetMin / budgetMax (listings only), treat 0 as “no filter”
  (
    {{ budgetMinInput.value == null || budgetMinInput.value === 0 }}
    OR (
      base.kind = 'listing'
      AND base.price_aed >= {{ budgetMinInput.value }}
    )
  )
  AND
  (
    {{ budgetMaxInput.value == null || budgetMaxInput.value === 0 }}
    OR (
      base.kind = 'listing'
      AND base.price_aed <= {{ budgetMaxInput.value }}
      OR(base.budget_max_aed = 1)
    )
  )
  AND

  -- G) listingPrice (client_requests only), treat 0 as “no filter”
  (
    {{ priceAedInput.value == null || priceAedInput.value === 0 }}
    OR (
      base.kind = 'client_request'
      AND base.budget_min_aed <= {{ priceAedInput.value }}
      AND base.budget_max_aed >= {{ priceAedInput.value }}
      OR(base.budget_max_aed = 1)
    )
  )
  AND

  -- H) areaMin / areaMax, treat 0 as “no filter”
  (
    {{ areaMinInput.value == null || areaMinInput.value === 0 }}
    OR base.area_sqft >= {{ areaMinInput.value }}
  )
  AND
  (
    {{ areaMaxInput.value == null || areaMaxInput.value === 0 }}
    OR base.area_sqft <= {{ areaMaxInput.value }}
  )

  AND ( {{ isDistressed.value == null }} OR ({{ isDistressed.value == 'distressed' }} AND base.is_distressed_deal IS TRUE) OR ({{ isDistressed.value == 'market' }} AND base.is_distressed_deal IS NOT TRUE))

  AND ( {{ isOffPlan.value == null }} OR ({{ isOffPlan.value == 'off-plan' }} AND base.is_off_plan IS TRUE) OR ({{ isOffPlan.value == 'ready' }} AND base.is_off_plan IS NOT TRUE))

  -- I) static sanity checks
  AND base.bedrooms         IS NOT NULL
  AND base.communities      IS NOT NULL
  AND base.kind             IS NOT NULL
  AND base.transaction_type IS NOT NULL
  AND base.property_type    IS NOT NULL;